# This is a basic workflow to help you get started with Actions

name: LINEAR

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [ main ]
    types: [ review_requested ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    if: contains( github.event.pull_request.labels.*.name, 'ðŸ“¦ dependencies' )
    env: 
      GITHUB_API_TOKEN: "SPAGHET"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Print Env Var
        run: echo ${{ env.GITHUB_API_TOKEN }}
        
      - name: Print Github Event
        run: cat $GITHUB_EVENT_PATH

      - uses: actions/checkout@v2
        
      - name: Setup Python
        uses: actions/setup-python@v2
        
      - name: install requests
        run: pip install requests
        
      - name: Run Python Script
        run: |
          if [ $WHICH == "JIRA" ]
          then
            python ./.github/py_script.py -e $GITHUB_EVENT_PATH -u $JIRA_API_EMAIL -p $JIRA_API_TOKEN
          elif [ $WHICH == "LINEAR" ]
          then
            python ./.github/create-linear-issue-for-pull-request.py -e $GITHUB_EVENT_PATH -p $LINEAR_API_TOKEN
          fi
        env: 
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_API_EMAIL: ${{ secrets.JIRA_API_EMAIL }}
          LINEAR_API_TOKEN: ${{ secrets.LINEAR_API_TOKEN }} 
          WHICH: LINEAR

      
